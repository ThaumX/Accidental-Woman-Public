:: toolWidget [widget nobr]

<<nobr>>
<<silently>>
/*inserts the chosen money symbol*/
<<widget "mon">><<print "₢">><</widget>>

<<widget "boobgif">>
<<silently>>
<<set _boober = 15>>
<<repeat 3000ms>>
  <<set _boober += 1>>
  <<if _boober > 30>>
    <<set _boober = 1>>
  <</if>>
  <<set _booberin = "[img[IMGbounce" + _boober + "]]">>
  <<replace "#boobers">><<print _booberin>><</replace>>
<</repeat>>
<</silently>><span id="boobers" class="rounded"><<print "[img[IMGbounce15]]">></span><</widget>>

<<widget "numberWord">>\
<<silently>>
<<if ndef $args[0]>>
	<<set _temp = aw.passage.title>>
	<<set $AW.error += ", comment error - no args sent to numberWord function in passage: ">>
	<<set $AW.error += _temp>>
	<<set _output = "no arg error numberWord">>
<<else>>
	<<set _output = setup.numWord($args[0])>>
<</if>>
<</silently>>
<<print _output>>\
<</widget>>

<<widget "height">>\
<<silently>>
<<if ndef $args[0]>>
<<set _cum = ↂ.pc.body.height>>
	<<if $AW.metric>>
		<<set _cum = Math.round(_cum * 2.54)>>
    <<set _output = _cum + " cm">>
  <<else>>
    <<set _ft = Math.floor(_cum / 12)>>
    <<set _in = _cum % 12>>
    <<set _output = setup.numWord(_ft)>>
    <<set _output += " feet ">>
    <<set _output += setup.numWord(_in)>>
    <<if _in == 1>>
      <<set _output += " inch">>
    <<else>>
      <<set _output += " inches">>
    <</if>>
	<</if>>
<<else>>
  <<set _output = "<span class='bad'>Non-PC height not set up in height macro!</span>">>
<</if>>
<</silently>><<print _output>>\
<</widget>>

<<widget "units">>
<<if $AW.metric>><<print "cm">><<else>><<print "inches">><</if>>
<</widget>>

/*inserts money symbol and player cash*/
<<widget "money">>
@@.money;<<print "₢">><<print $AW.cash>>@@\
<</widget>>

/*inserts commentary quicker*/
<<widget "comment">>
<<if ndef $args[0]>>
	<<set $AW.error += ", comment error - no args sent to comment function in passage: " + aw.passage.title>>
<<else>>
	<<if $commentary>>
    <<set _ter = either("a","b","c","d","e","f")+random(0,9)+random(0,9)>>
    <<set _pri = "<span class='commentary'><<message 'dev commentary' btn '"+_ter+"'>>@@.com;"+$args[0]+"@@<</message>></span>">>
		<<print _pri>>
	<</if>>
<</if>>
<</widget>>

/*
<<widget "cond">>
<<silently>>
<<if ndef $args[0]>>
	<<set $AW.error += ", condition interpret error - no args sent to function in passage: ">>
	<<set $AW.error += aw.passage.title>>
	<<set $args[0] = 0>>
<</if>>
<<set _array = $args[0]>>
<<switch _array[0]>>
<<case 0>>
	<<set _outputMain = "Clean">>
<<case 1>>
	<<set _outputMain = "Normal">>
<<case 2>>
	<<set _outputMain = "Grungy">>
<<case 3>>
	<<set _outputMain = "Smelly">>
<<case 4>>
	<<set _outputMain = "Dirty">>
<<case 5>>
	<<set _outputMain = "Filthy">>
<</switch>>
<<if ndef _array[1]>>
	<<set _fluids = "A">>
<<elseif _array[1].length == 1>>
	<<set _fluids = _array[1]>>
	<<set _fluidsB = "A">>
	<<set _fluidsC = "ZZZ">>
<<elseif _array[1].length == 2>>
	<<set _fluids = _array[1].slice(0,1)>>
	<<set _fluidsB = $args[0].slice(1,2)>>
	<<set _fluidsC = "A">>
<<else>>
	<<set _fluids = _array[1].slice(0,1)>>
	<<set _fluidsB = $args[0].slice(1,2)>>
	<<set _fluidsC = $args[0].slice(2,3)>>
<</if>>
<<if _fluids == "A">>
	<<set _outputFluid = 0>>
<<else>>
	<<switch _fluids>>
		<<case "B">>
		<<set _outputFluid = "Damp">>/*water/
		<<case "C">>
		<<set _outputFluid = "Wet">>/*water/
		<<case "D">>
		<<set _outputFluid = "Drenched">>/*water/
		<<case "E">>
		<<set _outputFluid = "Sweaty">>
		<<case "F">>
		<<set _outputFluid = "Soaked with sweat">>
		<<case "G">>
		<<set _outputFluid = "Damp with femlube">>
		<<case "H">>
		<<set _outputFluid = "Wet with femlube">>
		<<case "I">>
		<<set _outputFluid = "Soaked with femlube">>
		<<case "J">>
		<<set _outputFluid = "Crusted with dried femlube">>
		<<case "K">>
		<<set _outputFluid = "Damp with milk">>
		<<case "L">>
		<<set _outputFluid = "Wet with milk">>
		<<case "M">>
		<<set _outputFluid = "Soaked with milk">>
		<<case "N">>
		<<set _outputFluid = "Crusted with dried milk">>
		<<case "O">>
		<<set _outputFluid = "Sprinkled with cum">>
		<<case "P">>
		<<set _outputFluid = "Splattered with cum">>
		<<case "Q">>
		<<set _outputFluid = "Coated with cum">>
		<<case "R">>
		<<set _outputFluid = "Sprinkled with dried cum">>
		<<case "S">>
		<<set _outputFluid = "Splattered with dried cum">>
		<<case "T">>
		<<set _outputFluid = "Coated with dried cum">>
	<</switch>>
	<<switch _fluidsB>>
		<<case "A">>
		<<set _outputFluid += ".">>
		<<case "B">>
		<<set _outputFluid += ", damp">>/*water/
		<<case "C">>
		<<set _outputFluid += ", wet">>/*water/
		<<case "D">>
		<<set _outputFluid += ", drenched">>/*water/
		<<case "E">>
		<<set _outputFluid += ", sweaty">>
		<<case "F">>
		<<set _outputFluid += ", soaked with sweat">>
		<<case "G">>
		<<set _outputFluid += ", damp with femlube">>
		<<case "H">>
		<<set _outputFluid += ", wet with femlube">>
		<<case "I">>
		<<set _outputFluid += ", soaked with femlube">>
		<<case "J">>
		<<set _outputFluid += ", crusted with dried femlube">>
		<<case "K">>
		<<set _outputFluid += ", damp with milk">>
		<<case "L">>
		<<set _outputFluid += ", wet with milk">>
		<<case "M">>
		<<set _outputFluid += ", soaked with milk">>
		<<case "N">>
		<<set _outputFluid += ", crusted with dried milk">>
		<<case "O">>
		<<set _outputFluid += ", sprinkled with cum">>
		<<case "P">>
		<<set _outputFluid += ", splattered with cum">>
		<<case "Q">>
		<<set _outputFluid += ", coated with cum">>
		<<case "R">>
		<<set _outputFluid += ", sprinkled with dried cum">>
		<<case "S">>
		<<set _outputFluid += ", splattered with dried cum">>
		<<case "T">>
		<<set _outputFluid += ", coated with dried cum">>
	<</switch>>
	<<switch _fluidsC>>
		<<case "A">>
		<<set _outputFluid += ".">>
		<<case "B">>
		<<set _outputFluid += ", and damp.">>/*water/
		<<case "C">>
		<<set _outputFluid += ", and wet.">>/*water/
		<<case "D">>
		<<set _outputFluid += ", and drenched.">>/*water/
		<<case "E">>
		<<set _outputFluid += ", and sweaty.">>
		<<case "F">>
		<<set _outputFluid += ", and soaked with sweat.">>
		<<case "G">>
		<<set _outputFluid += ", and damp with femlube.">>
		<<case "H">>
		<<set _outputFluid += ", and wet with femlube.">>
		<<case "I">>
		<<set _outputFluid += ", and soaked with femlube.">>
		<<case "J">>
		<<set _outputFluid += ", and crusted with dried femlube.">>
		<<case "K">>
		<<set _outputFluid += ", and damp with milk.">>
		<<case "L">>
		<<set _outputFluid += ", and wet with milk.">>
		<<case "M">>
		<<set _outputFluid += ", and soaked with milk.">>
		<<case "N">>
		<<set _outputFluid += ", and crusted with dried milk.">>
		<<case "O">>
		<<set _outputFluid += ", and sprinkled with cum.">>
		<<case "P">>
		<<set _outputFluid += ", and splattered with cum.">>
		<<case "Q">>
		<<set _outputFluid += ", and coated with cum.">>
		<<case "R">>
		<<set _outputFluid += ", and sprinkled with dried cum.">>
		<<case "S">>
		<<set _outputFluid += ", and splattered with dried cum.">>
		<<case "T">>
		<<set _outputFluid += ", and coated with dried cum.">>
	<</switch>>
<</if>>
<<if _outputFluid == 0>>
	<<set _output = _outputMain + ".">>
<<elseif _outputMain == "Clean" || _outputMain == "Normal">>
	<<set _output = _outputFluid>>
<<else>>
	<<set _output = _outputMain + "--" + _outputFluid>>
<</if>>
<</silently>><<print _output>>
<</widget>>
*/

<<widget "LoadingText">>
<<silently>>
<<repeat 1800ms>>
<<set _loadingtext = either("Giving NPCs free will...","Repairing Rejuvinator...","Cleaning up femlube drips...","Preparing mammary glands for lactation...","Calculating uterine lining growth...","Injecting naughty dreams...","Preparing subliminal programming...","Checking Institute agent's infiltration progress...","Distracting player from ''real'' danger...","Determining victors in sperm battles...","Determining if peeping tom likes what he sees...","Getting sheets dirty...","Checking for new chemicals in the tap water...","Murdering the unpopular NPCs...","Processing Player's psychological profile...","Using ∞ based statistics to process love...","Checking for subdermal implant activity...","Determining how favorite NPCs are lying...","Eagerly anticipating a bad end...","Contemplating referential ethics...","Processing NPC suicides...","Abusing NPCs for plot purposes...","Calculating Appletree's Rohypnol supply...","Determining which NPCs have nothing left to lose...","Implementing hypnotic commands...","Determining local jail's degeneration...","Calculating growth of local cults...","Screwing something up...","Processing...","Processing...","Reticulating splines...","Reticulating splines...")>>
<<replace "#loadingtextspan">><<print _loadingtext>><</replace>>
<</repeat>>
<</silently>><span id="loadingtextspan" class="megrim white blinking" style="font-size:1.25rem;font-weight:bold;">Loading...</span><</widget>>

<<widget "helpPop">>
<<link [img[Help Information|IMGhelpbutton]]>>
<<if ndef $args[0]>>
	<<run UI.alert("help name not defined, please report.")>>
	<<set $AW.error += "helpPop arg (name) error on passage: " + aw.passage.title>>
<<elseif ndef $args[1]>>
	<<run UI.alert("help text not defined, please report.")>>
	<<set $AW.error += "helpPpp arg (text) error on passage: " + aw.passage.title>>
<<else>>
	<<dialog $args[0]>>@@.exp;<<print $args[1]>>@@<</dialog>>
<</if>><</link>>
<</widget>>

<<widget "warnPop">>
<<link [img[Warning Information|warningS]]>>
<<if ndef $args[0]>>
	<<run UI.alert("help name not defined, please report.")>>
	<<set $AW.error += "helpPop arg (name) error on passage: " + aw.passage.title>>
<<elseif ndef $args[1]>>
	<<run UI.alert("help text not defined, please report.")>>
	<<set $AW.error += "helpPpp arg (text) error on passage: " + aw.passage.title>>
<<else>>
	<<dialog $args[0]>>@@.exp;<<print $args[1]>>@@<</dialog>>
<</if>><</link>>
<</widget>>

<<widget "loadingImg">>
<img data-passage="IMGloadingBoobs" style="border: 5px solid #014f8e;">
<</widget>>

<<widget "cleanLevel">>
<<silently>>
<<if ndef $args[0]>>
	<<set _jism = "@@.orange;.smear;Error--No Arg@@">>
	<<set $AW.error += ", No arg sent to cleanLevel function in passage: " + aw.passage.title>>
<<elseif isNaN($args[0])>>
	<<if ndef $args[1]>>
		<<set _jism = "@@.orange;.smear;Error--No Arg@@">>
		<<set $AW.error += ", No arg sent to cleanLevel function in passage: " + aw.passage.title>>
	<<else>>
		<<switch $args[0]>>
		<<case 10>>
			<<set _jism = "@@.ship;Pristine@@">>
		<<case 9>>
			<<set _jism = "@@.lime;Spotless@@">>
		<<case 8>>
			<<set _jism = "@@.green;Very Clean@@">>
		<<case 7>>
			<<set _jism = "@@.springgreen;Clean@@">>
		<<case 6>>
			<<set _jism = "@@.yellow;Passable@@">>
		<<case 5 4>>
			<<set _jism = "@@.orange;Messy@@">>
		<<case 3 2>>
			<<set _jism = "@@.orangered;Dirty@@">>
		<<case 1>>
			<<set _jism = "@@.orangered;.smear;Filthy@@">>
		<<case 0>>
			<<set _jism = "@@.red;.smear;Disgusting@@">>
		<<case default>>
			<<set _jism = "@@.orange;.smear;Error@@">>
		<</switch>>
	<</if>>
<<else>>
	<<set _tits = Math.trunc($args[0]/10)>>
	<<switch _tits>>
		<<case 10>>
			<<set _jism = "@@.ship;Pristine@@">>
		<<case 9>>
			<<set _jism = "@@.lime;Spotless@@">>
		<<case 8>>
			<<set _jism = "@@.green;Very Clean@@">>
		<<case 7>>
			<<set _jism = "@@.springgreen;Clean@@">>
		<<case 6>>
			<<set _jism = "@@.yellow;Passable@@">>
		<<case 5 4>>
			<<set _jism = "@@.orange;Messy@@">>
		<<case 3 2>>
			<<set _jism = "@@.orangered;Dirty@@">>
		<<case 1>>
			<<set _jism = "@@.red;Filthy@@">>
		<<case 0>>
			<<set _jism = "@@.red;.smear;Disgusting@@">>
		<<case default>>
			<<set _jism = "@@.orange;.smear;Error@@">>
	<</switch>>
<</if>>
<</silently>><<print _jism>>
<</widget>>
*/

/*sets up a styled radiobutton. also accepts third arg for <label> element*/
<<widget "radiobutt">>
<<silently>>
<<if ndef $args[0] || ndef $args[1]>>
	<<set _skeet = "<span style='background: darkred;color: white'>ERROR: Custom Radio Macro missing arguments.</span>">>
<<elseif typeof($args[0]) != "string">>
	<<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Radio Macro first arg variable must be wrapped in quotes.</span>">>
<<elseif $args[0][0] != "ↂ" && $args[0][0] != "$" && $args[0][0] != "_" && $args[0].slice(0,5) !== "setup">>
	<<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Radio Macro first arg must be a variable name (missing $or_).</span>">>
<<elseif def $args[2]>>
	<<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
		<<set _skoo = "'" + $args[1] + "'">>
			<<set _skeet = "@@.option-input;<<radiobutton '" + $args[0] + "' " + _skoo + " checked>>">>
	<<else>>
		<<set _skoo = $args[1]>>
		<<set _skeet = "@@.option-input;<<radiobutton '" + $args[0] + "' " + _skoo + " checked>>">>
	<</if>>
<<else>>
	<<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
		<<set _skoo = "'" + $args[1] + "'">>
	<<else>>
		<<set _skoo = $args[1]>>
	<</if>>
	<<set _skeet = "@@.option-input;<<radiobutton '" + $args[0] + "' " + _skoo + ">>">>
<</if>>
<</silently>><<print _skeet>>
<</widget>>

<<widget "checkboxA">>
<<silently>>
<<if $screenReader>>
  <<set _fuck = "<<set _jizz = " + $args[0] + ">>">><<print _fuck>>
  <<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
    <<set _skoo = "'" + $args[1] + "'">>
  <<else>>
    <<set _skoo = $args[1]>>
  <</if>>
  <<if isNaN($args[2]) && typeof($args[2]) != "boolean">>
    <<set _skii = "'" + $args[2] + "'">>
  <<else>>
    <<set _skii = $args[2]>>
  <</if>>
  <<if (def $args[3] || $args[2] == _jizz)>>
    <<set _skeet = "<span class='screenread'><<checkbox '" + $args[0] + "' " + _skoo + " " + _skii + " checked>></span>">>
  <<else>>
    <<set _skeet = "<span class='screenread'><<checkbox '" + $args[0] + "' " + _skoo + " " + _skii + ">></span>">>
  <</if>>
<<else>>
  <<set _skeet = "nope">>
  <<if ndef $args[0] || ndef $args[1] || ndef $args[2]>>
    <<set _skeet = "<span style='background: darkred;color: white'>ERROR: Custom Checkbox Macro missing arguments.</span>">>
  <<elseif typeof($args[0]) != "string">>
    <<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Checkbox Macro first arg variable must be wrapped in quotes.</span>">>
  <<elseif $args[0][0] != "ↂ" && $args[0][0] != "$" && $args[0][0] != "_" && $args[0].slice(0,5) !== "setup">>
    <<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Radio Macro first arg must be a variable name (missing $or_).</span>">>
  <</if>>
  <<if _skeet == "nope">><<set _fuck = "<<set _jizz = " + $args[0] + ">>">><<print _fuck>><</if>>
  <<if _skeet == "nope" && (def $args[3] || $args[2] == _jizz)>>
    <<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
      <<set _skoo = "'" + $args[1] + "'">>
    <<else>>
      <<set _skoo = $args[1]>>
    <</if>>
    <<if isNaN($args[2]) && typeof($args[2]) != "boolean">>
      <<set _skii = "'" + $args[2] + "'">>
    <<else>>
      <<set _skii = $args[2]>>
    <</if>>
    <<set _skeet = "<div class='onOffBox'><<douchebag '" + $args[0] + "' " + _skoo + " " + _skii + " checked>></div>">>
  <<elseif _skeet == "nope">>
    <<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
      <<set _skoo = "'" + $args[1] + "'">>
    <<else>>
      <<set _skoo = $args[1]>>
    <</if>>
    <<if isNaN($args[2]) && typeof($args[2]) != "boolean">>
      <<set _skii = "'" + $args[2] + "'">>
    <<else>>
      <<set _skii = $args[2]>>
    <</if>>
    <<set _skeet = "<div class='onOffBox'><<douchebag '" + $args[0] + "' " + _skoo + " " + _skii + ">></div>">>
  <</if>>
<</if>>
<</silently>><<print _skeet>>
<</widget>>

<<widget "checkboxB">>
<<silently>>
<<set _skeet = "nope">>
<<if ndef $args[0] || ndef $args[1] || ndef $args[2]>>
	<<set _skeet = "<span style='background: darkred;color: white'>ERROR: Custom Checkbox Macro missing arguments.</span>">>
<<elseif typeof($args[0]) != "string">>
	<<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Checkbox Macro first arg variable must be wrapped in quotes.</span>">>
<<elseif $args[0][0] != "ↂ" && $args[0][0] != "$" && $args[0][0] != "_" && $args[0].slice(0,5) !== "setup">>
	<<set _skeet = "<span style='background: red;color: white'>ERROR: Custom Radio Macro first arg must be a variable name (missing $or_).</span>">>
<</if>>
<<if _skeet == "nope">><<set _fuck = "<<set _jizz = " + $args[0] + ">>">><<print _fuck>><</if>>
<<if _skeet == "nope" && (def $args[3] || $args[2] == _jizz)>>
	<<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
		<<set _skoo = "'" + $args[1] + "'">>
	<<else>>
		<<set _skoo = $args[1]>>
	<</if>>
	<<if isNaN($args[2]) && typeof($args[2]) != "boolean">>
		<<set _skii = "'" + $args[2] + "'">>
	<<else>>
		<<set _skii = $args[2]>>
	<</if>>
	<<set _skeet = "<div class='squaredOne'><<douchebag '" + $args[0] + "' " + _skoo + " " + _skii + " checked>></div>">>
<<elseif _skeet == "nope">>
	<<if isNaN($args[1]) && typeof($args[1]) != "boolean">>
		<<set _skoo = "'" + $args[1] + "'">>
	<<else>>
		<<set _skoo = $args[1]>>
	<</if>>
	<<if isNaN($args[2]) && typeof($args[2]) != "boolean">>
		<<set _skii = "'" + $args[2] + "'">>
	<<else>>
		<<set _skii = $args[2]>>
	<</if>>
	<<set _skeet = "<div class='squaredOne'><<douchebag '" + $args[0] + "' " + _skoo + " " + _skii + ">></div>">>
<</if>>
<</silently>><<print _skeet>>
<</widget>>

<<widget "popNPCinfo">>
<<if ndef $args[0]>>
<<print "@@.warn;ERROR no NPC set for view macro@@">>
<<else>>
<<set _npcName = "Viewing " + aw.npc[$args[0]].main.name + " " + aw.npc[$args[0]].main.surname.slice(0,1) + ".">>
<<set _key = $args[0]>>
@@.infoLink;<<link "View NPC">>
<<dialog _npcName>>
<center>@@.head2;NPC Viewer 10K2@@</center>
<table><tr>
<td colspan=3 style="text-align:center">
@@.ident;<<print aw.npc[_key].main.name>> <<if aw.npc[_key].main.nickname != "none">>//<<print '"'>><<print aw.npc[_key].main.nickname>><<print '" '>>//<</if>><<print aw.npc[_key].main.surname>>@@
</td></tr><tr>
<td width="33.3%"><<set _tded = false>>
  ''Main:''<br>
  <<for _i to 0, _names to Object.keys(aw.npc[_key].main); _i lt _names.length; _i++>>
    @@.note;<<print _names[_i]>>: <<print aw.npc[_key].main[_names[_i]]>><br>@@
  <</for>>
  <br>''Fertility:''<br>
  <<for _i to 0, _names to Object.keys(aw.npc[_key].fert); _i lt _names.length; _i++>>
    @@.note;<<print _names[_i]>>: <<print aw.npc[_key].fert[_names[_i]]>><br>@@
  <</for>>
  </td><td width="33.3%">
  <br>''Body:''<br>
  <<for _i to 0, _names to Object.keys(aw.npc[_key].body); _i lt _names.length; _i++>>
	<<if _names[_i] != "cock" && _names[_i] != "balls" && _names[_i] != "tits" && _names[_i] != "pussy" && _names[_i] != "asshole">>
    @@.note;<<print _names[_i]>>: <<print aw.npc[_key].body[_names[_i]]>><br>@@
	<</if>>
  <</for>>
  <br>''Mutations:''
  <<for _i to 0, _names to Object.keys(aw.npc[_key].mutate); _i lt _names.length; _i++>>
    <<if aw.npc[_key].mutate[_names[_i]]>><br>@@.note;<<print _names[_i]>>@@<</if>>
  <</for>>
  </td><td>
	<<if aw.npc[_key].main.genes != "XX">>
		''Cock:''<br>
		<<for _j to 0, _namo to Object.keys(aw.npc[_key].body.cock); _j lt _namo.length; _j++>>
        @@.note;--<<print _namo[_j]>>: <<print aw.npc[_key].body.cock[_namo[_j]]>><br>@@
    <</for>>
		<br>''Balls:''<br>
		<<for _j to 0, _namo to Object.keys(aw.npc[_key].body.balls); _j lt _namo.length; _j++>>
        @@.note;--<<print _namo[_j]>>: <<print aw.npc[_key].body.balls[_namo[_j]]>><br>@@
    <</for>>
	<</if>>
	<<if aw.npc[_key].main.genes != "XY">>
		''Breasts:''<br>
		<<for _j to 0, _namo to Object.keys(aw.npc[_key].body.tits); _j lt _namo.length; _j++>>
        @@.note;--<<print _namo[_j]>>: <<print aw.npc[_key].body.tits[_namo[_j]]>><br>@@
    <</for>>
		<br>''Pussy:''<br>
		<<for _j to 0, _namo to Object.keys(aw.npc[_key].body.pussy); _j lt _namo.length; _j++>>
        @@.note;--<<print _namo[_j]>>: <<print aw.npc[_key].body.pussy[_namo[_j]]>><br>@@
    <</for>>
	<</if>>
  <br>''Asshole:''<br>
  @@.note;--<<print "virgin">>: <<print aw.npc[_key].body.asshole.virgin>><br>
  --<<print "tight">>: <<print aw.npc[_key].body.asshole.tight>>
	</td></tr></table>
<</dialog>>
<</link>>@@
<</if>>
<</widget>>

<<widget "letCap">><span class="head3"><<print $args[0]>></span><</widget>>


<<widget "setPCportrait">>
	<<silently>>
		<<set $AW.pcPortrait = setup.porn.femaleNPC(ↂ.pc, true)>>
	<</silently>>
<</widget>>

/*<<widget "scrolltop">>
<<if ndef $args[0]>>
  <<run setup.alert('no element id sent to scrolltop')>>
<</if>>
<<replace $args[0]>><</replace>>
<</widget>>*/

<</silently>>
<</nobr>>

/*
<<widget "clothingName">>
<<silently>>
  [0-0"colorword", 0-1"style", 0-2"substyle", 0-3"tertiary", 0-4"fabric", 0-5"item code"]
  <<set _array = $args[0]>>
  <<if "string" == typeof _array>>
    <<set _output = _array>>
  <<else>>
    <<switch $pref.clothingDetail>>
      <<case 1>>
        <<set _output = _array[0] + " ''" + _array[1] + "''">>
      <<case 2>>
        <<if _array[2] == "regular">>
          <<set _output = _array[0] + " ''" + _array[1] + "''">>
        <<else>>
          <<set _output = _array[0] + " " + _array[2] + " ''" + _array[1] + "''">>
        <</if>>
      <<case 3>>
        <<if ndef _array[3] || _array[3] == "na">>
          <<if _array[2] == "regular">>
          <<set _output = _array[0] + " ''" + _array[1] + "''">>
        <<else>>
          <<set _output = _array[0] + " " + _array[2] + " ''" + _array[1] + "''">>
        <</if>>
        <<else>>
          <<if _array[2] == "regular">>
            <<set _output = _array[0] + " ''" + _array[1] + "'' (//" + _array[3] + "//)">>
          <<else>>
            <<set _output = _array[0] + " " + _array[2] + " ''" + _array[1] + "'' (//" + _array[3] + "//)">>
          <</if>>
        <</if>>
      <<case 4>>
        <<if ndef _array[3] || _array[3] == "na">>
          <<if _array[2] == "regular">>
            <<set _output = _array[0] + " " + _array[4] + " ''" + _array[1] + "''">>
          <<else>>
            <<set _output = _array[0] + " " + _array[4] + " " + _array[2] + " ''" + _array[1] + "''">>
          <</if>>
        <<else>>
          <<if _array[2] == "regular">>
            <<set _output = _array[0] + " " + _array[4] + " ''" + _array[1] + "'' (//" + _array[3] + "//)">>
          <<else>>
            <<set _output = _array[0] + " " + _array[4] + " " + _array[2] + " ''" + _array[1] + "'' (//" + _array[3] + "//)">>
          <</if>>
        <</if>>
      <<default>>
        <<set _output = _array[0] + " " + _array[2] + " ''" + _array[1] + "'' (error)">>
    <</switch>>
  <</if>>
<</silently>><<print _output>>
<</widget>>
*/