:: BElingerie [nobr map]


<<silently>>
/*Basic settings. Most done by map control passage*/

<</silently>>
/*Primary map module for the region is in a separate passage and called here. Prevents duplication.*/
<<include [[MAPbullseye]]>>
/*by default, passage image displays [passagename]LOC in a dialog when clicked.*/
<div id="mainshits">
/*ARRIVAL displays walking text based on origin location, sent from map control module    EVENT displays any events that happened while walking*/
<p><<walkDescriptBullseye>> <<mapEventBullseye>></p>
/* WEATHER displays set weather conditions. For indoors locations, describes weather outside*/
<p class="weather-disc"><<switch $map.weather>>
<<case "clr">>

<<case "sct">>

<<case "ovc">>

<<case "-ra">>

<<case "ra">>

<<case "+ra">>

<<case "fog">>

<<case "shra">>

<<case "tsra">>

<<case "-sn">>

<<case "sn">>

<<case "+sn">>

<<default>>

<</switch>>
Some kind of magic is keeping all of Muschi Valley blessed with perfect weather. (Weather not yet implemented.)
</p>
/*LOCATION description of  location without any reference to time/weather and doesn't mention character.*/
@@.head3;Y@@ou are standing in the underwear section of Bullseye's women's clothing department. For some reason, they seem to think this is also a good place for jewelry. You notice that Bullseye has posted several warning notes in the bra section.
<br>
/*IN-PASSAGE span text*/
<span id="locact"></span>
</div>
/*Main action button display area. complex actions, or those with many options, should open a dialog display to control, rather than placing numerous buttons here. New content can be added via DOM macro or direct JS using append. (never use replace)*/
<div id="actionbar">
/*this controls the element that will appear on mouse hover NOTE that for reasons involving the DOM, the closing tag is a bit different. EX: <<macro>><<endmacro>> instead of <</macro>>*/
<<hoverrevise hovPanties>>
	<<button "Panties">><<set _time = 15>><<set _time += random(3,10)>><<set _time += random(2,10)>><<addTime _time>><<dialog "Shop for Panties">><<include [[BEpanties]] "div">><<onclose>>setup.refresh()<</dialog>><</button>>
<<endhoverrevise>>
<<hoverrevise hovBras>>
	<<button "Bras">><<set _time = 14>><<set _time += random(2,9)>><<set _time += random(1,9)>><<addTime _time>><<dialog "Shop for Bras">><<include [[BEbras]] "div">><<onclose>>setup.refresh()<</dialog>><</button>>
<<endhoverrevise>>
<<hoverrevise hovStocking>>
	<<button "Stockings">><<set _time = 11>><<set _time += random(3,12)>><<set _time += random(3,12)>><<addTime _time>><<dialog "Shop for Stockings">><<include [[BEstockings]] "div">><<onclose>>setup.refresh()<</dialog>><</button>>
<<endhoverrevise>>
<<hoverrevise hovSleep>>
	@@.disabled;<<button "Sleepwear">><</button>>@@
<<endhoverrevise>>
<<hoverrevise hovJewel>>
	<<button "Jewelry">><<set _time = 8>><<set _time += random(1,11)>><<set _time += random(1,11)>><<addTime _time>><<dialog "Shop for Jewelry">><<include [[BEjewelry]]>><<onclose>>setup.refresh()<</dialog>><</button>>
<<endhoverrevise>>
<<hoverrevise titwarning>>
  <<button "Read Warning">><<addTime 3>><<dialog "Official FDA Warning">>@@.typewriter;â€  Since 2023 Federal regulations have required that any retailer selling brassiers must post the following FDA consumer safety notice in any area where they are on display.<br><br>''WARNING--Wearing brassiers is known to cause cancer, atrophy of connective tissue and ligaments, mammary tissue degredation, and may permanently harm your ability to breast feed.''<br>''Safety Guidelines''<br>a. Only wear brassiers that fit properly. Ill-fitting brassiers intensify the health consequences listed above.<br>b. Do not wear a brassier longer than 4 hours at a time.<br>c. For each hour a brassier is worn, allow your breasts to rest at least 30 minutes before wearing one again.<br>d. Do not wear a brassier more than 8 hours in a 24 hour period.<br>e. Count each hour spent wearing a compression brassier, commonly called a "sports bra", as 3 hours of normal wear.<br><br>''Personal Indemnity Act of 2020 Notice''--According to the Personal Indemnity Act, otherwise known as "Trump Care", your medical insurance claims or federal healthcare coverage (such as Medicare or Medicaid) can be denied if your condition was potentially caused by your own actions or negligence. Visit www.fda.gov/pia/brassiers to learn more about what health coverage you may lose from brassier use.@@ <br><<comment "The medical part is true, but nowhere near bad enough for the gov't/FDA to do anything about it. Fun fact: A large study in france found that wearing bras rapidly accellerates the sagging of breasts, with the effect being worse the larger the breasts were.">><</dialog>><</button>>
<<endhoverrevise>>
<<hoverrevise hovCart>>
	@@.imgbutton;<<link [img[IMGshopCart]]>><<BEcartDisplay>><</link>>@@
<<endhoverrevise>>
</div>

/*Main display for information about actions*/
<div id="actionInfo">
<<insertion hovPanties>>@@.exp;Check out Bullseye's selection of panties. [20-35min]@@<<endinsertion>>
<<insertion hovBras>>@@.exp;Check out Bullseye's selection of bras for sale. [25-40min]@@<<endinsertion>>
<<insertion hovStocking>>@@.exp;Check out Bullseye's selection of legwear for sale. [15-30min]@@<<endinsertion>>
<<insertion hovSleep>>@@.exp;Check out Bullseye's selection of sleepwear for sale. [25-40min]@@<<endinsertion>>
<<insertion hovJewel>>@@.exp;Check out Bullseye's meager selection of jewelry. [10-30min]@@<<endinsertion>>
<<insertion hovCart>>@@.exp;launches a popup that contains an ordered list of all the items in your cart, along with the pre-membership discount price.@@<<endinsertion>>
<<insertion titwarning>>Take a closer look at the conspicuous warning posted in the brassier area. [3min]<<endinsertion>>
</div>
/*this contains randomized event options that will print inside the related spans*/
/*Weather-based actions added, like opening an umbrella*/
<<weatherBullseyeAct>>
/*Event-based actions added*/
<<mapEventBullseyeAct>>


:: BElingerieLOC [nobr]

[img[IMGbullseyeBig]]


:: BEjewelry [nobr]

<h3>Bullseye Jewelry Selection</h3>
<<print setup.jewel.sale()>>
Learn more about jewelry in the <<info "Encyclopedia" "guideJewelry">>

:: BEpanties [nobr]

<<set _num = $BEshopP.length>>
/*change overall expensiveness based on the store*/
<<set _sMod = $shop.storemod.bullseye>>
/*sets the price baseline to accommodate different clothing types*/
<<set _baseP = $shop.base.panties>>
/*create fractional price unit - remember base8*/
<<set _fracP = _baseP/24>>
/*set up a max price deduction for being ugly*/
<<set _maxMod = _fracP * -2>>
/*inits arrays that line up with displayed clothes */
<<set _items = []>>
<<set _prices = []>>
/*it seems silly to generate prices each time the clothing is viewed, but this is the simplist and most 'future proof' method that came to mind to ensure that prices would properly display when sales and such happened.*/
/*Loop to generate prices and set items*/
<<for _i to 0; _i < _num; _i++>>
	<<run _items.push($BEshopP[_i])>>
	<<set _workP = _baseP>>
	/*mod for attractiveness*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][1] + 5)))>>
	/*mod for formality*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][3] + 6)))>>
	/*mod for sexiness - note use abs value as sexiness or cuteness increases cost*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (Math.abs(_items[_i][2]-2) + _items[_i][4])))>>
	/*apply stor multiplier*/
	<<set _workP *= _sMod>>
	/*finally, push price to array*/
	<<run _prices.push(Math.round(_workP))>>
	/*update clothing item with calculated price*/
	<<set _items[_i][11] = _prices[_i]>>
<</for>>
<table id="noBorder">
  <tr id="sortShop">
    <td style="width:8%">
      <span class="head3">Sort:</span>
    </td>
    <td class="shop_sort_buttons">
      <<button "Appeal">><<set $BEshopP = setup.clothSort($BEshopP,1)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<button "Sexy/Cute">><<set $BEshopP = setup.clothSort($BEshopP,2)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<button "Formality">><<set $BEshopP = setup.clothSort($BEshopP,3)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<button "Exposure">><<set $BEshopP = setup.clothSort($BEshopP,4)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<button "Style">><<set $BEshopP = setup.clothSort($BEshopP,6)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<button "Price">><<set $BEshopP = setup.clothSort($BEshopP,11)>><<replace ".passage-bepanties">><<include [[BEpanties]]>><</replace>><</button>>
      <<sp 3>><<info "Panties Guide" "guidePanties">>
    </td>
  </tr>
</table>
/*arrays are built, time to display them!*/
<table id="noBorder">
<<for _i to 0; _i < _num; _i++>>
	<tr id="noBorder">
	/*old habits die hard... so used to using the width property, but it isn't supported by html5*/
	<td style="width:85px">
	/*get the image data passage name, and hex color code*/
	<<set _imgName = setup.pantiesIcon(_items[_i][6])>>
	<<set _imgColor = setup.colorDecode(_items[_i][9])>>
	/*prep image display html code for print macro, then print image*/
	<<set _img = '<img data-passage="' + _imgName + '" style="background-color:' + _imgColor + '">'>>
	<<print _img>>
	/*end column 1*/
	</td><td style="width:600px">
	/*print out the name*/
  <<set _name = _items[_i][0]>>
	@@.storeitem;<<clothingName _name>>@@<br>
	/*print out remaining relevant content*/
	@@.note;''Attractiveness'' <<print _items[_i][1]>> (//<<atrGarmentDiscript _items[_i][1]>>//), ''Exposure'' <<print Math.floor(_items[_i][4] / 10)>><<print ".">><<print (_items[_i][4] % 10)>> (//<<exposureGarmentDiscript _items[_i][4]>>//)@@
	/*nobr removes newline, but often leaves an unwanted space instead. that's the reason why most text-formatting code is piled into a single line.*/
	<br>@@.note;<<if _items[_i][2] > 0>>''Sexiness'' <<print _items[_i][2]>><<else>>''Cuteness'' <<print Math.abs(_items[_i][2])>><</if>> <<if _items[_i][2] >= 6>>(//very sexy//)<<elseif _items[_i][2] >= 3>>(//sexy//)<<elseif _items[_i][2] <= -3>>(//very cute//)<<elseif _items[_i][2] <= 0>>(//cute//)<</if>>, <<if _items[_i][3] > 5>>Formal<<elseif _items[_i][3] > 1>>Semi-Formal<<elseif _items[_i][3] > -3>>Casual<<else>>Very Casual<</if>> Attire@@
	/*end column*/
	</td><td style="width:85px">
	/*show the price*/
	<center>
	@@.exp;Price@@<br>
	@@.money;<<mon>><<print _prices[_i]>>@@
	</center>
	/*last column for awesome add to cart button (sarcasm)*/
	</td><td style="width:150px">
	/*prep the wiggly bits to refer to them properly*/
	<<set _span = "button" + _i>>
	<<set _spick = '<span id="' + _span + '">@@.note;item ' + (_i+1) + '@@</span>'>>
	<<set _spanName = "#" + _span>>
	/*the counter variable _i will keep changing. instead of using print, use fancy new capture macro*/
	<<capture _i, _spanName>>
		<center>
		/*actually add the button*/
		<<button "Add to Cart">>
			<<run $cart.panties.push(_items[_i])>>
			/*update the contents of the shopping menu added to the cart*/
			<<replace "#cart">>
			<<set _numbb = $cart.panties.length>>
			<<set _subtotal = 0>>
			<<for _j to 0; _j < _numbb; _j++>>
				<<set _cunt = _j + 1>>
				<<set _cock = $cart.panties[_j]>>
				<<set _subtotal += _cock[11]>>
				<<set _delcmd = "<<link 'remove'>><<set $cart.panties.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
				<<if _cunt < 10>>
					@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<<else>>
					@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<</if>>
			<</for>>
			<<if _subtotal == 0>>
				@@.note;Your cart is empty@@
			<<else>>
				@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
			<</if>>
			<</replace>>
			<<replace _spanName>>
				@@.note;Added to Cart!@@
				/*delete after 2 seconds*/
				<<set _timer = "<<timed 2s>><<replace " + _spanName + ">>...<</replace>><</timed>>">>
				<<print _timer>>
			<</replace>>
		<</button>>
		/*added to cart span*/
		<br>
		<<print _spick>>
		</center>
	<</capture>>
	/*end of the row*/
	</td></tr>
<</for>>
/*label row and refresh button*/
<tr id="noBorder">
<td colspan=4>
<<button "Refresh Cart">>
	<<replace "#cart">>
		<<if ndef $cart.panties.length>>
			<<set _numbb = 0>>
		<<else>>
			<<set _numbb = $cart.panties.length>>
		<</if>>
		<<set _subtotal = 0>>
		<<for _j to 0; _j < _numbb; _j++>>
			<<set _cunt = _j + 1>>
			<<set _cock = $cart.panties[_j]>>
			<<set _subtotal += _cock[11]>>
			<<set _delcmd = "<<link 'remove'>><<set $cart.panties.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
			<<if _cunt < 10>>
				@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<<else>>
				@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<</if>>
		<</for>>
		<<if _subtotal == 0>>
			@@.note;Your cart is empty@@
		<<else>>
			@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
		<</if>>
	<</replace>>
<</button>> @@.ident;''Cart Contents:''@@
</td></tr>
/*final row to show the contents of the cart*/
<tr id="noBorder">
<td colspan=4>
<span id="cart">
	<<if ndef $cart.panties.length>>
		<<set _numbb = 0>>
	<<else>>
		<<set _numbb = $cart.panties.length>>
	<</if>>
	<<set _subtotal = 0>>
	<<for _j to 0; _j < _numbb; _j++>>
		<<set _cunt = _j + 1>>
		<<set _cock = $cart.panties[_j]>>
		<<set _subtotal += _cock[11]>>
		<<set _delcmd = "<<link 'remove'>><<set $cart.panties.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
		<<if _cunt < 10>>
			@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<<else>>
			@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<</if>>
	<</for>>
	<<if _subtotal == 0>>
		@@.note;Your cart is empty@@
	<<else>>
		@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
	<</if>>
</span>
</td></tr>
</table>


:: BEbras [nobr]

<<set _num = $BEshopB.length>>
/*change overall expensiveness based on the store*/
<<set _sMod = $shop.storemod.bullseye>>
/*sets the price baseline to accommodate different clothing types*/
<<set _baseP = Math.max(18,($shop.base.bras+$PC.body.tits.cupNum))>>
/*create fractional price unit - remember base8*/
<<set _fracP = _baseP/24>>
/*set up a max price deduction for being ugly*/
<<set _maxMod = _fracP * -2>>
/*inits arrays that line up with displayed clothes */
<<set _items = []>>
<<set _prices = []>>
/*it seems silly to generate prices each time the clothing is viewed, but this is the simplist and most 'future proof' method that came to mind to ensure that prices would properly display when sales and such happened.*/
/*Loop to generate prices and set items*/
<<for _i to 0; _i < _num; _i++>>
	<<run _items.push($BEshopB[_i])>>
	<<set _workP = _baseP>>
	/*mod for attractiveness*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][1] + 5)))>>
	/*mod for formality*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][3] + 6)))>>
	/*mod for sexiness - note use abs value as sexiness or cuteness increases cost*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (Math.abs(_items[_i][2]-2) + _items[_i][4])))>>
	/*apply stor multiplier*/
	<<set _workP *= _sMod>>
	/*finally, push price to array*/
	<<run _prices.push(Math.round(_workP))>>
	/*update clothing item with calculated price*/
	<<set _items[_i][11] = _prices[_i]>>
<</for>>
<table id="noBorder">
  <tr id="sortShop">
    <td style="width:8%">
      <span class="head3">Sort:</span>
    </td>
    <td class="shop_sort_buttons">
      <<button "Appeal">><<set $BEshopB = setup.clothSort($BEshopB,1)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<button "Sexy/Cute">><<set $BEshopB = setup.clothSort($BEshopB,2)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<button "Formality">><<set $BEshopB = setup.clothSort($BEshopB,3)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<button "Exposure">><<set $BEshopB = setup.clothSort($BEshopB,4)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<button "Style">><<set $BEshopB = setup.clothSort($BEshopB,6)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<button "Price">><<set $BEshopB = setup.clothSort($BEshopB,11)>><<replace ".passage-bebras">><<include [[BEbras]]>><</replace>><</button>>
      <<sp 3>><<info "Bras Guide" "guideBras">>
    </td>
  </tr>
</table>
/*arrays are built, time to display them!*/
<table id="noBorder">
<<for _i to 0; _i < _num; _i++>>	
  <tr id="noBorder">
	/*old habits die hard... so used to using the width property, but it isn't supported by html5*/
	<td style="width:85px">
	/*get the image data passage name, and hex color code*/
	<<set _imgName = setup.brasIcon(_items[_i][6])>>
	<<set _imgColor = setup.colorDecode(_items[_i][9])>>
	/*prep image display html code for print macro, then print image*/
	<<set _img = '<img data-passage="' + _imgName + '" style="background-color:' + _imgColor + '">'>>
	<<print _img>>
	/*end column 1*/
	</td><td style="width:600px">
	/*print out the name*/
	 <<set _name = _items[_i][0]>>
  @@.storeitem;<<clothingName _name>>@@<br>
	/*print out remaining relevant content*/
	@@.note;''Attractiveness'' <<print _items[_i][1]>> (//<<atrGarmentDiscript _items[_i][1]>>//), ''Exposure'' <<print Math.floor(_items[_i][4] / 10)>><<print ".">><<print (_items[_i][4] % 10)>> (//<<exposureGarmentDiscript _items[_i][4]>>//)@@
	/*nobr removes newline, but often leaves an unwanted space instead. that's the reason why most text-formatting code is piled into a single line.*/
	<br>@@.note;<<if _items[_i][2] > 0>>''Sexiness'' <<print _items[_i][2]>><<else>>''Cuteness'' <<print Math.abs(_items[_i][2])>><</if>> <<if _items[_i][2] >= 6>>(//very sexy//)<<elseif _items[_i][2] >= 3>>(//sexy//)<<elseif _items[_i][2] <= -3>>(//very cute//)<<elseif _items[_i][2] <= 0>>(//cute//)<</if>>, <<if _items[_i][3] > 5>>Formal<<elseif _items[_i][3] > 1>>Semi-Formal<<elseif _items[_i][3] > -3>>Casual<<else>>Very Casual<</if>> Attire@@
	/*end column*/
	</td><td style="width:85px">
	/*show the price*/
	<center>
	@@.exp;Price@@<br>
	@@.money;<<mon>><<print _prices[_i]>>@@
	</center>
	/*last column for awesome add to cart button (sarcasm)*/
	</td><td style="width:150px">
	/*prep the wiggly bits to refer to them properly*/
	<<set _span = "button" + _i>>
	<<set _spick = '<span id="' + _span + '">@@.note;item ' + (_i+1) + '@@</span>'>>
	<<set _spanName = "#" + _span>>
	/*the counter variable _i will keep changing. instead of using print, use fancy new capture macro*/
	<<capture _i, _spanName>>
		<center>
		/*actually add the button*/
		<<button "Add to Cart">>
			<<run $cart.bra.push(_items[_i])>>
			/*update the contents of the shopping menu added to the cart*/
			<<replace "#cart">>
			<<set _numbb = $cart.bra.length>>
			<<set _subtotal = 0>>
			<<for _j to 0; _j < _numbb; _j++>>
				<<set _cunt = _j + 1>>
				<<set _cock = $cart.bra[_j]>>
				<<set _subtotal += _cock[11]>>
				<<set _delcmd = "<<link 'remove'>><<set $cart.bra.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
				<<if _cunt < 10>>
					@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<<else>>
					@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<</if>>
			<</for>>
			<<if _subtotal == 0>>
				@@.note;Your cart is empty@@
			<<else>>
				@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
			<</if>>
			<</replace>>
			<<replace _spanName>>
				@@.note;Added to Cart!@@
				/*delete after 2 seconds*/
				<<set _timer = "<<timed 2s>><<replace " + _spanName + ">>...<</replace>><</timed>>">>
				<<print _timer>>
			<</replace>>
		<</button>>
		/*added to cart span*/
		<br>
		<<print _spick>>
		</center>
	<</capture>>
	/*end of the row*/
	</td></tr>
<</for>>
/*label row and refresh button*/
<tr id="noBorder">
<td colspan=4>
<<button "Refresh Cart">>
	<<replace "#cart">>
		<<if ndef $cart.bra.length>>
			<<set _numbb = 0>>
		<<else>>
			<<set _numbb = $cart.bra.length>>
		<</if>>
		<<set _subtotal = 0>>
		<<for _j to 0; _j < _numbb; _j++>>
			<<set _cunt = _j + 1>>
			<<set _cock = $cart.bra[_j]>>
			<<set _subtotal += _cock[11]>>
			<<set _delcmd = "<<link 'remove'>><<set $cart.bra.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
			<<if _cunt < 10>>
				@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<<else>>
				@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<</if>>
		<</for>>
		<<if _subtotal == 0>>
			@@.note;Your cart is empty@@
		<<else>>
			@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
		<</if>>
	<</replace>>
<</button>> @@.ident;''Cart Contents:''@@
</td></tr>
/*final row to show the contents of the cart*/
<tr id="noBorder">
<td colspan=4>
<span id="cart">
	<<if ndef $cart.bra.length>>
		<<set _numbb = 0>>
	<<else>>
		<<set _numbb = $cart.bra.length>>
	<</if>>
	<<set _subtotal = 0>>
	<<for _j to 0; _j < _numbb; _j++>>
		<<set _cunt = _j + 1>>
		<<set _cock = $cart.bra[_j]>>
		<<set _subtotal += _cock[11]>>
		<<set _delcmd = "<<link 'remove'>><<set $cart.bra.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
		<<if _cunt < 10>>
			@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<<else>>
			@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<</if>>
	<</for>>
	<<if _subtotal == 0>>
		@@.note;Your cart is empty@@
	<<else>>
		@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
	<</if>>
</span>
</td></tr>
</table>

:: BEstockings [nobr]

<<set _num = $BEshopLeg.length>>
/*change overall expensiveness based on the store*/
<<set _sMod = $shop.storemod.bullseye>>
/*sets the price baseline to accommodate different clothing types*/
<<set _baseP = $shop.base.stockings>>
/*create fractional price unit - remember base8*/
<<set _fracP = _baseP/24>>
/*set up a max price deduction for being ugly*/
<<set _maxMod = _fracP * -2>>
/*inits arrays that line up with displayed clothes */
<<set _items = []>>
<<set _prices = []>>
/*it seems silly to generate prices each time the clothing is viewed, but this is the simplist and most 'future proof' method that came to mind to ensure that prices would properly display when sales and such happened.*/
/*Loop to generate prices and set items*/
<<for _i to 0; _i < _num; _i++>>
	<<run _items.push($BEshopLeg[_i])>>
	<<set _workP = _baseP>>
	/*mod for attractiveness*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][1] + 3)))>>
	/*mod for formality*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (_items[_i][3] + 5)))>>
	/*mod for sexiness - note use abs value as sexiness or cuteness increases cost*/
	<<set _workP += Math.max(_maxMod,Math.floor(_fracP * (Math.abs(_items[_i][2]-2) + _items[_i][4])))>>
	/*apply stor multiplier*/
	<<set _workP *= _sMod>>
	/*finally, push price to array*/
	<<run _prices.push(Math.round(_workP))>>
	/*update clothing item with calculated price*/
	<<set _items[_i][11] = _prices[_i]>>
<</for>>
<table id="noBorder">
  <tr id="sortShop">
    <td style="width:8%">
      <span class="head3">Sort:</span>
    </td>
    <td class="shop_sort_buttons">
      <<button "Appeal">><<set $BEshopLeg = setup.clothSort($BEshopLeg,1)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
      <<button "Sexy/Cute">><<set $BEshopLeg = setup.clothSort($BEshopLeg,2)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
      <<button "Formality">><<set $BEshopLeg = setup.clothSort($BEshopLeg,3)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
      <<button "Exposure">><<set $BEshopLeg = setup.clothSort($BEshopLeg,4)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
      <<button "Style">><<set $BEshopLeg = setup.clothSort($BEshopLeg,6)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
      <<button "Price">><<set $BEshopLeg = setup.clothSort($BEshopLeg,11)>><<replace ".passage-bestockings">><<include [[BEstockings]]>><</replace>><</button>>
    </td>
  </tr>
</table>
/*arrays are built, time to display them!*/
<table id="noBorder">
<<for _i to 0; _i < _num; _i++>>	
  <tr id="noBorder">
	/*old habits die hard... so used to using the width property, but it isn't supported by html5*/
	<td style="width:85px">
	/*get the image data passage name, and hex color code*/
	<<set _imgName = setup.stockingsIcon(_items[_i][6])>>
	<<set _imgColor = setup.colorDecode(_items[_i][9])>>
	/*prep image display html code for print macro, then print image*/
	<<set _img = '<img data-passage="' + _imgName + '" style="background-color:' + _imgColor + '">'>>
	<<print _img>>
	/*end column 1*/
	</td><td style="width:600px">
	/*print out the name*/
	<<set _name = _items[_i][0]>>
  @@.storeitem;<<clothingName _name>>@@<br>
	/*print out remaining relevant content*/
	@@.note;''Attractiveness'' <<print _items[_i][1]>> (//<<atrGarmentDiscript _items[_i][1]>>//), ''Exposure'' <<print Math.floor(_items[_i][4] / 10)>><<print ".">><<print (_items[_i][4] % 10)>> (//<<exposureGarmentDiscript _items[_i][4]>>//)@@
	/*nobr removes newline, but often leaves an unwanted space instead. that's the reason why most text-formatting code is piled into a single line.*/
	<br>@@.note;<<if _items[_i][2] > 0>>''Sexiness'' <<print _items[_i][2]>><<else>>''Cuteness'' <<print Math.abs(_items[_i][2])>><</if>> <<if _items[_i][2] >= 6>>(//very sexy//)<<elseif _items[_i][2] >= 3>>(//sexy//)<<elseif _items[_i][2] <= -3>>(//very cute//)<<elseif _items[_i][2] <= 0>>(//cute//)<</if>>, <<if _items[_i][3] > 5>>Formal<<elseif _items[_i][3] > 1>>Semi-Formal<<elseif _items[_i][3] > -3>>Casual<<else>>Very Casual<</if>> Attire@@
	/*end column*/
	</td><td style="width:85px">
	/*show the price*/
	<center>
	@@.exp;Price@@<br>
	@@.money;<<mon>><<print _prices[_i]>>@@
	</center>
	/*last column for awesome add to cart button (sarcasm)*/
	</td><td style="width:150px">
	/*prep the wiggly bits to refer to them properly*/
	<<set _span = "button" + _i>>
	<<set _spick = '<span id="' + _span + '">@@.note;item ' + (_i+1) + '@@</span>'>>
	<<set _spanName = "#" + _span>>
	/*the counter variable _i will keep changing. instead of using print, use fancy new capture macro*/
	<<capture _i, _spanName>>
		<center>
		/*actually add the button*/
		<<button "Add to Cart">>
			<<run $cart.leg.push(_items[_i])>>
			/*update the contents of the shopping menu added to the cart*/
			<<replace "#cart">>
			<<set _numbb = $cart.leg.length>>
			<<set _subtotal = 0>>
			<<for _j to 0; _j < _numbb; _j++>>
				<<set _cunt = _j + 1>>
				<<set _cock = $cart.leg[_j]>>
				<<set _subtotal += _cock[11]>>
				<<set _delcmd = "<<link 'remove'>><<set $cart.leg.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
				<<if _cunt < 10>>
					@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<<else>>
					@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
					<br>
				<</if>>
			<</for>>
			<<if _subtotal == 0>>
				@@.note;Your cart is empty@@
			<<else>>
				@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
			<</if>>
			<</replace>>
			<<replace _spanName>>
				@@.note;Added to Cart!@@
				/*delete after 2 seconds*/
				<<set _timer = "<<timed 2s>><<replace " + _spanName + ">>...<</replace>><</timed>>">>
				<<print _timer>>
			<</replace>>
		<</button>>
		/*added to cart span*/
		<br>
		<<print _spick>>
		</center>
	<</capture>>
	/*end of the row*/
	</td></tr>
<</for>>
/*label row and refresh button*/
<tr id="noBorder">
<td colspan=4>
<<button "Refresh Cart">>
	<<replace "#cart">>
		<<if ndef $cart.leg.length>>
			<<set _numbb = 0>>
		<<else>>
			<<set _numbb = $cart.leg.length>>
		<</if>>
		<<set _subtotal = 0>>
		<<for _j to 0; _j < _numbb; _j++>>
			<<set _cunt = _j + 1>>
			<<set _cock = $cart.leg[_j]>>
			<<set _subtotal += _cock[11]>>
			<<set _delcmd = "<<link 'remove'>><<set $cart.leg.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
			<<if _cunt < 10>>
				@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<<else>>
				@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
				<br>
			<</if>>
		<</for>>
		<<if _subtotal == 0>>
			@@.note;Your cart is empty@@
		<<else>>
			@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
		<</if>>
	<</replace>>
<</button>> @@.ident;''Cart Contents:''@@
</td></tr>
/*final row to show the contents of the cart*/
<tr id="noBorder">
<td colspan=4>
<span id="cart">
	<<if ndef $cart.leg.length>>
		<<set _numbb = 0>>
	<<else>>
		<<set _numbb = $cart.leg.length>>
	<</if>>
	<<set _subtotal = 0>>
	<<for _j to 0; _j < _numbb; _j++>>
		<<set _cunt = _j + 1>>
		<<set _cock = $cart.leg[_j]>>
		<<set _subtotal += _cock[11]>>
		<<set _delcmd = "<<link 'remove'>><<set $cart.leg.deleteAt(" + _j + ")>><<replace '#cart'>>@@.ident;Deleted!@@<</replace>><</link>>">>
		<<if _cunt < 10>>
			@@.exp;0<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<<else>>
			@@.exp;<<print _cunt>>)@@ @@.money;<<mon>><<print _cock[11]>>@@ - @@.exp;<<print _cock[0]>>@@ <<print _delcmd>>
			<br>
		<</if>>
	<</for>>
	<<if _subtotal == 0>>
		@@.note;Your cart is empty@@
	<<else>>
		@@.exp;''Subtotal:''@@ @@.money;<<mon>><<print _subtotal>>@@
	<</if>>
</span>
</td></tr>
</table>


