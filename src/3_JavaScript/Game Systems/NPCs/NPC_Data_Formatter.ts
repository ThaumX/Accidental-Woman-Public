
//  8888888888                                      888
//  888                                             888
//  888                                             888
//  8888888  .d88b.  888d888 88888b.d88b.   8888b.  888888
//  888     d88""88b 888P"   888 "888 "88b     "88b 888
//  888     888  888 888     888  888  888 .d888888 888
//  888     Y88..88P 888     888  888  888 888  888 Y88b.
//  888      "Y88P"  888     888  888  888 "Y888888  "Y888


// tslint:disable-next-line:max-line-length
setup.npcDataFormat = function({body, main, sched, bground, rship, sex, flags, friends, clothes, status, cond, outfit, mutate, pref, core, fert, makeout, info}: NPCinputData = {body, main, sched, bground, rship, sex, flags, friends, clothes, status, cond, outfit, mutate, pref, core, fert, makeout, info}): DataNPC {
  const tempNPC = {} as DataNPC;
  try {
    tempNPC.main = {
      id: main.id,
      age: main.age,
      bd: clone(main.bd),
      female: main.female,
      male: main.male,
      genes: main.genes,
      seen: main.seen,
      interact: main.interact,
      relation: main.relation,
      suicide: main.suicide,
      lifetime: (main.lifetime == null) ? 0 : main.lifetime,
      count: (main.count == null) ? 0 : main.count,
      tags: clone(main.tags),
      name: main.name,
      surname: main.surname,
      portrait: main.portrait,
      nickname: main.nickname,
    };
  } catch (e) { aw.con.warn(`Data failed on .main with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.body = {
      tits: {
        shape: body.tits.shape,
        nipple: body.tits.nipple,
        nipLength: body.tits.nipLength || random(1, 7),
        nipGirth: body.tits.nipGirth || random(1, 5),
        areola: body.tits.areola || random(1, 5),
        puffy: body.tits.puffy || random(1, 5),
        band: body.tits.band,
        silicone: body.tits.silicone || 0,
        base: {
          bra: body.tits.bra,
          cup: body.tits.cup,
          cupNum: body.tits.cupNum,
          cupRaw: body.tits.cupRaw,
          size: body.tits.size,
        },
        lact: {
          on: body.tits.lact.on || false,
          max: body.tits.lact.max || 0,
          size: body.tits.lact.size || 0,
          cupNum: body.tits.lact.cupNum,
          cup: body.tits.lact.cup,
          bra: body.tits.lact.bra,
        },
      },
      pussy: {
        virgin: body.pussy.virgin || false,
        tight: body.pussy.tight || -1,
        stretch: body.pussy.stretch || -1,
        time: body.pussy.time || -1,
        wetness: body.pussy.time || -1,
        tags: clone(body.pussy.tags),
      },
      asshole: {
        virgin: body.asshole.virgin || false,
        tight: body.asshole.tight || -1,
        stretch: body.asshole.stretch || -1,
        time: body.asshole.time || -1,
        wetness: body.asshole.time || -1,
        tags: clone(body.asshole.tags),
      },
      cock: {
        length: body.cock.length || -1,
        girth: body.cock.girth || -1,
        head: body.cock.head || "normal",
        vol: body.cock.vol || -1,
        circum: body.cock.circum || false,
        hard: body.cock.hard || -1,
        smegma: body.cock.smegma || false,
        tags: clone(body.cock.tags) || ["none"],
      },
      balls: {
        count: body.balls.count || -1,
        size: body.balls.size || -1,
        sac: body.balls.sac || -1,
        hang: body.balls.hang || -1,
        tags: clone(body.balls.tags) || ["none"],
      },
      race: body.race,
      skinColor: body.skinColor,
      tone: body.tone,
      weight: body.weight,
      shoulders: body.shoulders,
      hips: body.hips,
      waist: body.waist,
      pelvis: body.pelvis,
      height: body.height,
      ass: body.ass,
      clit: body.clit,
      labia: body.labia,
      beauty: body.beauty,
      face: body.face,
      brow: body.brow,
      nose: body.nose,
      lips: body.lips,
      jaw: body.jaw,
      eyeColor: body.eyeColor,
      lactation: body.lactation,
      lactCapacity: body.lactCapacity,
      orgasm: body.orgasm,
      energy: body.energy,
      topATR: body.topATR,
      botATR: body.botATR,
      ATR: body.ATR,
      tags: clone(body.tags),
      ears: body.ears,
    };
  } catch (e) { aw.con.warn(`Data failed on .body with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.groom = {
      hairColor: body.hairColor || "pink",
      hairCurl: body.hairCurl || random(1, 5),
      pubeColor: body.pubeColor || "pink",
      hairdye: body.hairdye || "none",
      hairDefaultFancy: body.hairDefaultFancy || "neat",
      hairDefaultCasual: body.hairDefaultCasual || "neat",
      pubeStyle: body.pubes || "neatly trimmed",
      pubeLength: body.pubeLength || -1,
      bikini: body.bikini || "shaved",
      pubeShape: body.pubeShape || "no",
      leghair: body.leghair || "shaved",
      armpit: body.armpit || "shaved",
      makeup: {
        atr: body.makeup.atr || 0,
        sexy: body.makeup.sexy || 0,
        clown: body.makeup.clown || false,
        type: body.makeup.type || "none",
        desc: body.makeup.desc || "is free of makeup",
        look: body.makeup.look || "clean",
      },
      teeth: body.teeth || "normal",
      hairLength: body.hairLength || random(3, 6),
      hairStyle: body.hairStyle || "neat",
    };
  } catch (e) { aw.con.warn(`Data failed on .groom with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.sched = {
      workdays: clone(sched.workdays) || [true, true, true, true, true, false, false],
      workhours: clone(sched.workhours) || [8, 17],
      workLoc: sched.workLoc || "none",
      outhours: clone(sched.outhours) || [0, 6],
      locations: clone(sched.locations) || [],
    };
  } catch (e) { aw.con.warn(`Data failed on .sched with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.background = {
      highSchool: bground.hschool || false,
      college: bground.college || false,
      associate: bground.associate || false,
      bachelor: bground.bachelor || false,
      master: bground.master || false,
      doctor: bground.doctor || false,
      inSchool: bground.inschool || false,
      education: bground.education || 0,
      homeParents: bground.homeParents || false,
      wealth: bground.wealth || -2,
      cash: bground.cash || random(50, 200),
      bank: bground.bank || random(100, 400),
      debt: bground.debt || random(8000, 14000),
      home: bground.home || 1,
      job: bground.job || "public toilet scrubber",
      car: clone(bground.car) || ["Furd", "Fister", "used"],
      timeApple: bground.timeApple || random(1, 15),
      sister: bground.sister || 0,
      sisterYounger: bground.sisterYounger || false,
      brother: bground.brother || 0,
      brotherYounger: bground.brotherYounger || false,
      parentDivorced: bground.parentDivorced || false,
      stepParent: bground.stepParent || false,
      dadDead: bground.dadDead || false,
      momDead: bground.momDead || false,
      married: bground.married || false,
      exSpouse: bground.exSpouse || 0,
      rShip: bground.rShip || false,
      affair: bground.affair || false,
      stories: (bground.stories == null) ? [] : clone(bground.stories),
    };
  } catch (e) { aw.con.warn(`Data failed on .background with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.rship = {
      friend: rship.friend || false,
      acquaint: rship.acquaint || false,
      dating: rship.dating || false,
      lovers: rship.lovers || false,
      exclusive: rship.exclusive || false,
      engaged: rship.engaged || false,
      married: rship.married || false,
      likePC: rship.likePC || 0,
      likeNPC: rship.likeNPC || 0,
      lovePC: rship.lovePC || 0,
      loveNPC: rship.loveNPC || 0,
      companion: rship.companion || 0,
      domsub: rship.domsub || 50,
      mesh: rship.mesh || 0,
      daysince: rship.daysince || 0,
      space: rship.space || 0,
      dates: rship.dates || 0,
      hangout: rship.hangout || 0,
      met: rship.met || 0,
      sleptover: rship.sleptover || 0,
      pcSlept: rship.pcSlept || 0,
    };
  } catch (e) { aw.con.warn(`Data failed on .rship with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.cond = {
      hair: clone(cond.hair) || {},
      face: clone(cond.face) || {},
      chest: clone(cond.chest) || {},
      back: clone(cond.back) || {},
      hands: clone(cond.hands) || {},
      stomach: clone(cond.stomach) || {},
      butt: clone(cond.butt) || {},
      groin: clone(cond.groin) || {},
      genitals: clone(cond.genitals) || {},
      thighs: clone(cond.thighs) || {},
      legs: clone(cond.legs) || {},
      feet: clone(cond.feet) || {},
      vagFluid: clone(cond.vagFluid) || {},
      anusFluid: clone(cond.anusFluid) || {},
    };
  } catch (e) { aw.con.warn(`Data failed on .cond with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.record = {
      makeout: clone(makeout) || [],
      sex: {
        vanilla: sex.vanilla || 0,
        oralPC: sex.oralPC || 0,
        oralNPC: sex.oralNPC || 0,
        anal: sex.anal || 0,
        public: sex.public || 0,
        swallowed: sex.swallowed || 0,
        creampie: sex.creampie || 0,
        accidentCP: sex.accidentCP || 0,
        forced: sex.forced || 0,
        unprotected: sex.unprotected || 0,
        interupted: sex.interupted || 0,
        nocumNPC: sex.nocumNPC || 0,
        nocumPC: sex.nocumPC || 0,
        mob: sex.mob || 0,
        bondage: sex.bondage || 0,
        sadoMaso: sex.sadoMaso || 0,
        watersport: sex.watersport || 0,
        domsub: sex.domsub || 0,
        roleplay: sex.roleplay || 0,
        fetish: sex.fetish || 0,
        exhibit: sex.exhibit || 0,
        rapist: sex.rapist || 0,
        raped: sex.raped || 0,
        saboPCbc: sex.saboPCbc || 0,
        caughtSabo: sex.caughtSabo || 0,
        PCsaboBC: sex.PCsaboBC || 0,
        PCsaboCaught: sex.PCsaboCaught || 0,
        sexlocs: clone(sex.sexlocs) || ["none"],
        tags: clone(sex.tags) || ["none"],
      },
      flag: {
        other: clone(flags.other) || ["none"],
        events: clone(flags.events) || ["none"],
        knows: clone(flags.knows) || ["none"],
        rumor: clone(flags.rumor) || ["none"],
        exes: clone(flags.exes) || ["none"],
        kids: flags.kids || 0,
        kidsPC: flags.kidsPC || 0,
        cheatonPC: flags.cheatonPC || 0,
        cheatedon: flags.cheatedon || 0,
        cheatWithPC: flags.cheatWithPC || 0,
        knowPCcheated: flags.knowPCcheated || 0,
        PCknowCheated: flags.PCknowCheated || 0,
        toys: flags.toys || false,
        toysPublic: flags.toysPublic || false,
        knowPCpreg: flags.knowPCpreg || false,
        isFather: flags.isFather || false,
        thinkFather: flags.thinkFather || false,
        suspicion: flags.suspicion || 0,
        PCsuspicion: flags.PCsuspicion || 0,
        thinkPCfaithful: flags.thinkPCfaithful || false,
        thinkNPCfaithful: flags.thinkNPCfaithful || false,
      },
    };
  } catch (e) { aw.con.warn(`Data failed on .record with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.record.info = {
      bodyGeneral: (info != null && info.bodyGeneral != null) ? info.bodyGeneral : false,
      bodyJunk: (info != null && info.bodyJunk != null) ? info.bodyJunk : false,
      bodyTits: (info != null && info.bodyTits != null) ? info.bodyTits : false,
      bodyDetail: (info != null && info.bodyDetail != null) ? info.bodyDetail : false,
      status: (info != null && info.status != null) ? info.status : 0,
      fert: (info != null && info.fert != null) ? info.fert : 0,
      trait: (info != null && info.trait != null) ? info.trait : 0,
      kink: (info != null && info.kink != null) ? info.kink : 0,
      mutate: (info != null && info.mutate != null) ? info.mutate : false,
      core: (info != null && info.core != null) ? info.core : 0,
      pref: (info != null && info.pref != null) ? info.pref : 0,
      sched: (info != null && info.sched != null) ? info.sched : false,
      bGround: (info != null && info.bGround != null) ? info.bGround : 0,
    };
  } catch (e) { aw.con.warn(`Data failed on .record.info with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.friends = clone(friends) || [];
    tempNPC.clothes = {
      outfits: {
        casual: clone(outfit.casual) || { atr: 0, sexy: 0, formal: 0, expTop: 0, expBot: 0, panties: 0, bra: 0, leg: 0, top: 0, bottom: 0, accA: 0, accB: 0, accC: 0, coat: 0, shoes: 0, bag: 0 },
        fancy: clone(outfit.fancy) || { atr: 0, sexy: 0, formal: 0, expTop: 0, expBot: 0, panties: 0, bra: 0, leg: 0, top: 0, bottom: 0, accA: 0, accB: 0, accC: 0, coat: 0, shoes: 0, bag: 0 },
        work: clone(outfit.work) || { atr: 0, sexy: 0, formal: 0, expTop: 0, expBot: 0, panties: 0, bra: 0, leg: 0, top: 0, bottom: 0, accA: 0, accB: 0, accC: 0, coat: 0, shoes: 0, bag: 0 },
        athletic: clone(outfit.athletic) || { atr: 0, sexy: 0, formal: 0, expTop: 0, expBot: 0, panties: 0, bra: 0, leg: 0, top: 0, bottom: 0, accA: 0, accB: 0, accC: 0, coat: 0, shoes: 0, bag: 0 },
        swim: clone(outfit.swim) || { atr: 0, sexy: 0, formal: 0, expTop: 0, expBot: 0, panties: 0, bra: 0, leg: 0, top: 0, bottom: 0, accA: 0, accB: 0, accC: 0, coat: 0, shoes: 0, bag: 0 },
      },
      current: clothes.current || "none",
      worn: {
        panties: clothes.panties || false,
        bra: clothes.bra || false,
        leg: clothes.leg || false,
        top: clothes.top || false,
        bottom: clothes.bottom || false,
        accA: clothes.accA || false,
        accB: clothes.accB || false,
        accC: clothes.accC || false,
        coat: clothes.coat || false,
        shoes: clothes.shoes || false,
        bag: clothes.bag || false,
      },
    };
  } catch (e) { aw.con.warn(`Data failed on .clothes with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.status = {
      birthCon: {
        diaphragm: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        femaleCondom: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        menstrualCup: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        sponge: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        condom: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        headCap: {
          worn: false,
          type: "none",
          effect: 0,
          health: 0,
          break: false,
          sabo: 0,
        },
        hormone: 0,
        hormoneType: "none",
        knowIneffective: false,
        ineffective: false,
      },
      alcohol: status.alcohol || 0,
      drugs: clone(status.drugs) || [0, 0, 0, 0, 0],
      wetness: status.wetness || 0,
      fertText: status.fertText || "none",
      risk: status.risk || 0,
      wombA: {
        exists: (main.female) ? true : false,
        preg: (status.pregA > 0) ? true : false,
        know: (status.pregA > 0) ? true : false,
        birthed: 0,
        miscarry: 0,
        aborts: 0,
        fetus: [],
        zygote: [],
        total: 0,
      },
      wombB: {
        exists: (main.female && mutate.twinWomb) ? true : false,
        preg: (status.pregB > 0) ? true : false,
        know: (status.pregB > 0) ? true : false,
        birthed: 0,
        miscarry: 0,
        aborts: 0,
        fetus: [],
        zygote: [],
        total: 0,
      },
      period: status.period || 0,
      milk: status.milk || 0,
      milkStore: status.milkStore || 0,
      arousal: status.arousal || 0,
      pleasure: status.pleasure || 0,
      need: status.need || 0,
      satisfaction: status.satisfaction || 0,
      atr: status.ATR || 0,
      stress: status.stress || 0,
      happy: status.happy || 0,
      anger: status.anger || 0,
      lonely: status.lonely || 0,
      fatigue: status.fatigue || 0,
      sleep: status.sleep || false,
      health: status.health || 0,
      healthOld: status.healthOld || 0,
      will: status.will || 0,
      overAnger: status.overAnger || false,
      overStress: status.overStress || false,
      overDepress: status.overDepress || false,
      underSatisfy: status.underSatisfy || 0,
      addict: {
        sex: status.addict.sex || 0,
        alc: status.addict.alc || 0,
        heat: status.addict.heat || 0,
        satyr: status.addict.satyr || 0,
        focus: status.addict.focus || 0,
        cum: status.addict.cum || 0,
        zone: status.addict.zone || 0,
        cream: status.addict.cream || 0,
        sexNeed: status.addictNeed.sexNeed || 0,
        alcNeed: status.addictNeed.alcNeed || 0,
        heatNeed: status.addictNeed.heatNeed || 0,
        satyrNeed: status.addictNeed.satyrNeed || 0,
        focusNeed: status.addictNeed.focusNeed || 0,
        cumNeed: status.addictNeed.cumNeed || 0,
        zoneNeed: status.addictNeed.zoneNeed || 0,
        creamNeed: status.addictNeed.creamNeed || 0,
        jonesing: status.jonesing || 0,
        withdrawl: status.withdrawl || false,
      },
      energy: {
        amt: status.energy || 6,
        rate: status.energyRate || 5,
        regen: status.energyRegen || true,
        max: 15,
      },
      kids: status.kids || 0,
      morality: status.morality || 0,
      corrupt: status.corrupt || 0,
      perversion: status.perversion || 0,
      bimbo: status.bimbo || 0,
      inPublic: status.inPublic || false,
      injury: clone(status.injury) || [],
      disease: clone(status.disease) || [],
      mindbreak: status.mindbreak || false,
      clean: status.clean || 0,
    };
  } catch (e) { aw.con.warn(`Data failed on .status with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.mutate = {
      smooth: mutate.Smooth || false,
      lilithCurse: mutate.LilithCurse || false,
      noRefract: mutate.NoRefract || false,
      megaNuts: mutate.MegaNuts || false,
      killerSperm: mutate.KillerSperm || false,
      bitchBreaker: mutate.BitchBreaker || false,
      megaLong: mutate.MegaLong || false,
      iron: mutate.Iron || false,
      virile: mutate.Virile || false,
      acidPre: mutate.AcidPre || false,
      girth: mutate.Girth || false,
      contort: mutate.Contort || false,
      cumpire: mutate.Cumpire || false,
      powerEjac: mutate.PowerEjac || false,
      multgasm: mutate.Multgasm || false,
      immune: mutate.Immune || false,
      milk: mutate.Milk || false,
      acid: mutate.Acid || false,
      birthCon: mutate.BC || false,
      multiple: mutate.Multiple || false,
      gestate: mutate.Gestate || false,
      cycle: mutate.Cycle || false,
      twinWomb: mutate.TwinWomb || false,
      pheromone: mutate.Pheromone || false,
      period: mutate.Period || false,
      mouth: mutate.Mouth || false,
      pseudoPreg: mutate.PseudoPreg || false,
      elastic: mutate.Elastic || false,
      litePhero: mutate.LitePhero || false,
      goddess: mutate.goddess || false,
      fertStorm: mutate.fertStorm || false,
    };
  } catch (e) { aw.con.warn(`Data failed on .mutate with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.pref = {
      Fweight: pref.Fweight || [0, 0, 0, 0, 0, 0],
      Mweight: pref.Mweight || [0, 0, 0, 0, 0, 0],
      Fheight: pref.Fheight || [0, 0, 0, 0, 0],
      Mheight: pref.Mheight || [0, 0, 0, 0, 0],
      Fmuscle: pref.Fmuscle || [0, 0, 0, 0, 0, 0],
      Mmuscle: pref.Mmuscle || [0, 0, 0, 0, 0, 0],
      Fother: pref.Fother || [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      Mother: pref.Mother || [0, 0, 0, 0, 0, 0, 0, 0, 0],
      active: pref.active || 0,
      romance: pref.romance || 0,
      novel: pref.novel || 0,
      excite: pref.excite || 0,
      night: pref.night || 0,
      expensive: pref.expensive || 0,
      fancy: pref.fancy || 0,
      popular: pref.popular || 0,
    };
  } catch (e) { aw.con.warn(`Data failed on .pref with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.core = {
      procreate: {
        str: core.procreate.str || 0,
        secure: core.procreate.secure || 0,
        preg: core.procreate.preg || 0,
        kids: core.procreate.kids || 0,
        evolve: core.procreate.evolve || 0,
        pleasure: core.procreate.pleasure || 0,
      },
      morality: {
        str: core.morality.str || 0,
        life: core.morality.life || 0,
        liberty: core.morality.liberty || 0,
        property: core.morality.property || 0,
        honesty: core.morality.honesty || 0,
        integrity: core.morality.integrity || 0,
      },
      agreeable: {
        str: core.agreeable.str || 0,
        interest: core.agreeable.interest || 0,
        empathy: core.agreeable.empathy || 0,
        caring: core.agreeable.caring || 0,
        trust: core.agreeable.trust || 0,
        altruism: core.agreeable.altruism || 0,
      },
      conscient: {
        str: core.conscient.str || 0,
        thoughtful: core.conscient.thoughtful || 0,
        responsible: core.conscient.responsible || 0,
        attention: core.conscient.attention || 0,
        trustworthy: core.conscient.trustworthy || 0,
        structure: core.conscient.structure || 0,
      },
      loyalty: {
        str: core.loyalty.str || 0,
        betrayal: core.loyalty.betrayal || 0,
        cheating: core.loyalty.cheating || 0,
        effort: core.loyalty.effort || 0,
        permanence: core.loyalty.permanence || 0,
        family: core.loyalty.family || 0,
      },
      curiosity: {
        str: core.curiosity.str || 0,
        complex: core.curiosity.complex || 0,
        learning: core.curiosity.learning || 0,
        abstract: core.curiosity.abstract || 0,
        curiosity: core.curiosity.curiosity || 0,
        novelty: core.curiosity.novelty || 0,
      },
      neurotic: {
        str: core.neurotic.str || 0,
        impulsive: core.neurotic.impulsive || 0,
        unstable: core.neurotic.unstable || 0,
        addiction: core.neurotic.addiction || 0,
        anxiety: core.neurotic.anxiety || 0,
        sensitive: core.neurotic.sensitive || 0,
        anger: core.neurotic.anger || 0,
        sadness: core.neurotic.sadness || 0,
      },
      ego: {
        str: core.ego.str || 0,
        selfinterest: core.ego.selfinterest || 0,
        selfworth: core.ego.selfworth || 0,
        confidence: core.ego.confidence || 0,
        fragility: core.ego.fragility || 0,
        selfimage: core.ego.selfimage || 0,
        mach: core.ego.mach || 0,
        risk: core.ego.risk || 0,
      },
    };
  } catch (e) { aw.con.warn(`Data failed on .core with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.fert = {
      fertility: fert.fertility || -1,
      egg: fert.egg || -1,
      implant: fert.implant || -1,
      vagHostile: fert.vagHostile || -1,
      period: fert.period || -1,
      wombHealth: fert.wombHealth || -1,
      multEgg: fert.multEgg || -1,
      barren: fert.barren || false,
      femaleFlag: clone(fert.flagF) || ["none"],
      cycle: fert.cycle || -1,
      cycStart: clone(fert.cycStart) || [random(1, 7), random(1, 4)],
      boost: fert.boost || -1,
      ovuMod: fert.ovuMod || -1,
      iud: fert.iud || false,
      pregTerm: fert.pregTerm || -1,
      quality: fert.quality || -1,
      ejac: fert.ejac || -1,
      resMax: fert.resMax || -1,
      reserve: fert.reserve || -1,
      refact: fert.refact || -1,
      quantity: fert.quantity || -1,
      surv: fert.surv || -1,
      maleFlag: clone(fert.flagM) || ["none"],
      fluid: {
        vulva: [],
        vest: [],
        mid: [],
        deep: [],
        cervix: [],
        womb: [],
        ovary: [],
      },
      ovuFlag: (fert.ovuFlag == null) ? false : fert.ovuFlag,
    };
  } catch (e) { aw.con.warn(`Data failed on .fert with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.kink = {
      position: clone(pref.position) || ["none"],
      sexact: clone(pref.sexact) || ["none"],
      risky: (pref.kinks.includes("risky")) ? true : false,
      pregnancy: (pref.kinks.includes("pregnancy")) ? true : false,
      sizequeen: (pref.kinks.includes("sizequeen")) ? true : false,
      cumSlut: (pref.kinks.includes("cumSlut")) ? true : false,
      sub: (pref.kinks.includes("sub")) ? true : false,
      exhibition: (pref.kinks.includes("exhibition")) ? true : false,
      masochist: (pref.kinks.includes("masochist")) ? true : false,
      buttSlut: (pref.kinks.includes("buttSlut")) ? true : false,
      publix: (pref.kinks.includes("publix")) ? true : false,
      slut: (pref.kinks.includes("slut")) ? true : false,
      superSlut: (pref.kinks.includes("superSlut")) ? true : false,
      hyperSlut: (pref.kinks.includes("hyperSlut")) ? true : false,
      oral: (pref.kinks.includes("oral")) ? true : false,
      anal: (pref.kinks.includes("anal")) ? true : false,
      force: (pref.kinks.includes("force")) ? true : false,
      rape: (pref.kinks.includes("rape")) ? true : false,
      liberate: (pref.kinks.includes("liberate")) ? true : false,
      easy: (pref.kinks.includes("easy")) ? true : false,
      nips: (pref.kinks.includes("nips")) ? true : false,
      dom: (pref.kinks.includes("dom")) ? true : false,
      water: (pref.kinks.includes("water")) ? true : false,
      bond: (pref.kinks.includes("bond")) ? true : false,
      hard: (pref.kinks.includes("hard")) ? true : false,
      fap: (pref.kinks.includes("fap")) ? true : false,
      shame: (pref.kinks.includes("shame")) ? true : false,
    };
  } catch (e) { aw.con.warn(`Data failed on .kink with ${e.name}: ${e.message}.`); }
  try {
    tempNPC.trait = {
      will: core.will || 2,
      libido: core.libido || 3,
      open: core.open || 0,
      vert: core.vert || 0,
      diq: core.diq || 0,
      iq: core.iq || 100,
      op: core.op || false,
      cl: core.cl || false,
      intro: core.intro || false,
      extro: core.extro || false,
      sexuality: core.sexuality || 0,
      straight: core.straight || true,
      bi: core.bi || false,
      homo: core.homo || false,
      bitch: core.bitch || 0,
      lowEsteem: core.lowEsteem || 0,
    };
  } catch (e) { aw.con.warn(`Data failed on .main with ${e.name}: ${e.message}.`); }
  return tempNPC;
};
